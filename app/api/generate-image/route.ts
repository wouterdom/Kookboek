import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenerativeAI } from '@google/generative-ai'
import { createClient } from '@/lib/supabase/server'

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY || '')

// Prompt for generating food images using Gemini
const IMAGE_GENERATION_PROMPT = `
Generate a beautiful, appetizing food photography image based on the following recipe details.
The image should be:
- High quality, professional food photography
- Well-lit with natural lighting
- Appetizing and inviting
- Focus on the finished dish
- Restaurant-quality plating
- Warm, inviting colors
- Shallow depth of field (blurred background)
- Top-down or 45-degree angle

Recipe details:
TITLE: {title}
{description}
{ingredients}

Create an image that represents this dish in the most appealing way possible.
`

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { recipeSlug, recipeTitle, recipeDescription, recipeIngredients } = body

    if (!recipeSlug || !recipeTitle) {
      return NextResponse.json(
        { error: 'Recipe slug and title are required' },
        { status: 400 }
      )
    }

    // Build the prompt with recipe details
    let prompt = IMAGE_GENERATION_PROMPT.replace('{title}', recipeTitle)

    if (recipeDescription) {
      prompt = prompt.replace('{description}', `DESCRIPTION: ${recipeDescription}`)
    } else {
      prompt = prompt.replace('{description}', '')
    }

    if (recipeIngredients && recipeIngredients.length > 0) {
      const ingredientsList = recipeIngredients.slice(0, 5).join(', ')
      prompt = prompt.replace('{ingredients}', `KEY INGREDIENTS: ${ingredientsList}`)
    } else {
      prompt = prompt.replace('{ingredients}', '')
    }

    console.log('Generating image with Gemini 2.5 Flash Image...')

    // Use Gemini 2.5 Flash Image for image generation
    const model = genAI.getGenerativeModel({ model: 'models/gemini-2.5-flash-image' })

    // Generate image using Gemini
    const result = await model.generateContent([prompt])

    const response = result.response
    const generatedImage = response.candidates?.[0]?.content?.parts?.find(
      part => part.inlineData
    )

    if (!generatedImage?.inlineData) {
      throw new Error('No image generated by Gemini')
    }

    // Convert base64 image to buffer
    const imageBuffer = Buffer.from(generatedImage.inlineData.data, 'base64')

    // Upload to Supabase storage
    const supabase = await createClient()
    const timestamp = Date.now()
    const randomStr = Math.random().toString(36).substring(2, 8)
    const filename = `${recipeSlug}-ai-${timestamp}-${randomStr}.png`
    const filepath = `${recipeSlug}/${filename}`

    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('recipe-images')
      .upload(filepath, imageBuffer, {
        contentType: 'image/png',
        upsert: false
      })

    if (uploadError) {
      console.error('Error uploading generated image:', uploadError)
      throw new Error('Failed to upload generated image')
    }

    // Get public URL
    const { data: { publicUrl } } = supabase.storage
      .from('recipe-images')
      .getPublicUrl(filepath)

    console.log('Successfully generated and uploaded AI image')

    return NextResponse.json({
      success: true,
      url: publicUrl,
      method: 'gemini-ai-generated',
      path: filepath
    })

  } catch (error) {
    console.error('Image generation error:', error)
    return NextResponse.json(
      {
        error: 'Failed to generate image',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}
